#include "deploy.h"


bool HostfileWrite(vector < InstallUnit_T > hostvector, char *path)
{
    ofstream configwrite(path);
    string hostfu;
    string hostn, hostfilestring, hName;
    vector < string > hN1;
    vector < InstallUnit_T > ::iterator hw;
    vector < InstallUnit_T > ::iterator hfw;
    time_t tt;
    time(&tt);
    char *dater = ctime(&tt);
    configwrite << "# Config file - Generated by <deploy> - " << dater << nl;
    for (hw = hostvector.begin(); hw < hostvector.end(); hw++)
    {
        hostn = hw->hostName;
        char hostncast[512];
        memset(hostncast, 0, sizeof(hostncast));
        sprintf(hostncast, "%s", hostn.c_str());
        if (!HostnameIn(hostncast, hN1))
        {
            hN1.push_back(hostn);
            configwrite << hostn << " ";
            for (hfw = hostvector.begin(); hfw < hostvector.end(); hfw++)
            {
                if (hostn == hfw->hostName)
                {
                    switch (hfw->funcUnit)
                    {
                        case (CDR_NET_VM):
                                    configwrite << "CDR_NET_VM ";
                        break;
                        case (RS):
                                    configwrite << "RS ";
                        break;
                        case (FS_JS):
                                    configwrite << "FS_JS ";
                        break;
                        case (PS_PS):
                                    configwrite << "PS_PS ";
                        break;
                        case (MS):
                                    configwrite << "MS ";
                        break;
                        default:
                        break;
                    }

                }
            }
            configwrite << "\n";
        }
    }
    configwrite.close();
    return true;
}



int restart_boxes(
    bool allinone,
    vector < InstallUnit_T >& installConfig
    )
{
    vector < string > hostNames;
    char buff[512];
    char HostConfig[512];
    vector < string > ::const_iterator aName;
    char sysCommand[maxFileNameSize];
    vector < InstallUnit_T > ::iterator iv;

    //  write the Host Configuration File

    sprintf(HostConfig, "HostConfig.cfg");
    if (!allinone)
    {
	cout << "Where do you want the host configuration file to be put [HostConfig.cfg] " << nl;
	cin.getline(buff, 512, '\n');
	if (strlen(buff) != 0)
	{
	    memset(HostConfig, 0, sizeof(HostConfig));
	    sprintf(HostConfig, "%s", buff);
		
	}
    }

    // run /etc/rc.d/init.d/vocalstart restart
    if (!allinone)
    {
	cout << "Do you want to restart the vocal softswitch on the remote systems (y/n) [y]: " << nl;
	cin.getline(buff, 512, '\n');
	if (!(strlen(buff) == 0 || !strcasecmp(buff, "y") || !strcasecmp(buff, "yes")) )
	{
	    cout << nl << "No remote software restart done" << nl;
	    return 0;
	}
    }
    if (!allinone && (strlen(buff) == 0 || strcasecmp(buff, "y") || strcasecmp(buff, "yes")) )
    {
	sortVectorbyFU(PS_PS, installConfig);
	hostNames = getHostNames(installConfig);
	for (aName = hostNames.begin(); aName < hostNames.end(); aName++)
	{
	    memset(sysCommand, 0, sizeof(sysCommand));
	    sprintf(sysCommand, "%s %s \"%s/vocalstart restart\"", rlp, aName->c_str(), RemoteVocalStartupDir);
	    if (mySystem(sysCommand) != 0)
	    {
		cout << "ERROR: can not startup vocal software on  " << aName->c_str() << nl;
	    }
	    else
	    {
		cout << aName->c_str() << " softswitch software restarted. " << nl;
	    }

	    // restart apache on the ps only
	}

	for (iv = installConfig.begin(); iv < installConfig.end(); iv++)
	{
	    if ((iv->funcUnit == PS_PS)||(iv->funcUnit == CDR_NET_VM))
	    {

		memset(sysCommand, 0, sizeof(sysCommand));
		sprintf(sysCommand, "%s %s \"killall -9 httpd\"", rlp, iv->hostName.c_str());
		mySystem(sysCommand, true);
		    
		memset(sysCommand, 0, sizeof(sysCommand));

		if (solarisOS)
		{
		    sprintf(sysCommand, "%s/apache restart", RemoteVocalStartupDir);
		}			    
		else
		{                    
		    sprintf(sysCommand, "%s %s \"/etc/rc.d/init.d/httpd restart\"", rlp, iv->hostName.c_str());
		}

		if (mySystem(sysCommand) != 0)
		{
		    cout << "Can not start the httpd process on " << iv->hostName.c_str() << ". Please do it manually." << nl
			 << " Warning : Your Browser will not be able to open the startup page!!"
			 << nl;
		}


	    }
	}

    }


    if (!HostfileWrite(installConfig, HostConfig))
    {
	cout << "Warning: Error writing the configuration file!!";
    }
    return 1;
}
