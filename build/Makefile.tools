# $Id: Makefile.tools,v 1.7 2006/04/06 19:44:30 greear Exp $

######################################################################
#                     Default tool names/locations
######################################################################

# this makefile defines what tools are named (and possibly where they
# are located) for different toolchains.

# possible values for VOCAL_TOOLCHAIN_TYPE are

#     gnu      -- the gcc compiler
#     gnu3      -- the gcc 3.0 compiler, when named gcc3
#     armcross   -- the ARM crosscompiler for 
#     sunpro   -- Sun's Forte C++ compiler
#     intel   --  intel's icc compiler for linux
#     msgnu    -- Microsoft's Visual C++ compiler , but using GNU make
#                 instead of project files.

# This is for when you have a different toolchain (e.g. different
# compiler, different linker) that you need to add special arguments
# for.  There are some architectural flags here, but try to keep them
# elsewhere if they apply to ALL compilers for a platform
# (e.g. big-endianness vs. little-endianness).

FPIC="-fPIC"
ifeq ($(ARCH),i386-mingw32msvc)
FPIC=
endif

##############################  GNU toolchain  ##############################

#  It is useful to allow CC and CXX to be set by a ./config or similar
# script.  So, source this file if it exists

include $(ROOT)/build/Makefile.cc_config

# Create an empty one if it does not exist
#$(ROOT)/build/Makefile.cc_config:
#	touch $@

ifeq ($(VOCAL_TOOLCHAIN_TYPE),gnu)

# Use whatever is already in our environment.
#CC		= gcc
#CXX		= g++

# This is desired, forces you to fix some things...
MKSHLIB		= $(CC) $(FPIC) -shared -Wl,-z,defs
#MKSHLIB		= $(CC) $(FPIC) -shared

ifeq ($(VOCAL_BUILD_GPROF),yes)
MKSHLIB += `fc-config --libs`
endif

DEP		= $(CXX) 
LINKER		= $(CXX) 
RANLIB		= ranlib
AR		= ar
ARFLAGS		= rv
DFLAGS		= -MM
DMANGLE		=
INSTALL		= install
HAS_REPO        = true
LNDIR		= $(shell pwd)/$(ROOT)/tools/lndir.sh
CFLAGS		+= -Wall $(FPIC)
CXXFLAGS	+= -Wall $(FPIC) -Wno-deprecated
DFLAG_INTEGRATED = -MMD
REPO_FLAG       = -frepo $(FPIC)

ifeq ($(VOCAL_BUILD_GPROF),yes)
DEBUG_FLAG	= -g  `fc-config --cflags`
LDLIBS_LAST += `fc-config --libs` -Wl,-rpath,/usr/local/lib
else
DEBUG_FLAG = -g
endif

# Give the runtime linker a clue as to where to find the vocal
# libraries.
ifeq ($(VOCAL_BUILD_SHARED_LIBS), yes)
LDLIBS_LAST += -Wl,-rpath,/usr/local/vocal/bin/lib
endif

COMPILE_SMALL_FLAG = -Os -fno-inline -fno-keep-static-consts

ifneq  ($(OSTYPE),Darwin)
LD_STATIC       = -Wl,-Bstatic
LD_DYNAMIC      = -Wl,-Bdynamic
endif

MAKE_SEPARATE_DEPENDENCY = 1
ifeq ($(OSTYPE),Linux)
ifeq ($(VOCAL_BUILD_SHARED_LIBS), yes)
    LDLIBS_LAST += -lstdc++
    START_LD_STATIC=
    CLOSE_LD_STATIC=
else
ifeq ($(ARCH),i386-mingw32msvc)
    LDLIBS_LAST += -lstdc++
else
    LDLIBS += -nodefaultlibs
    LDLIBS_LAST += -Wl,-Bstatic -lstdc++ -lgcc -lgcc_eh -Wl,-Bdynamic -lc -lm -lgcc_s
endif
    START_LD_STATIC=$(LD_STATIC)
    CLOSE_LD_STATIC=$(LD_DYNAMIC)
endif
endif
endif

##############################  INTEL COMPILER toolchain  ##############################

ifeq ($(VOCAL_TOOLCHAIN_TYPE),intel)
AR              = ar
ARFLAGS         = rv
CC              = icc
CXX             = icc
DEP             = icc -E
DFLAGS          = -M
DMANGLE         =
INSTALL         = install
LINKER          = icc
LNDIR           = $(shell pwd)/$(ROOT)/tools/lndir.sh

CFLAGS          += -w1
CXXFLAGS        += -w1

DEBUG_FLAG      = -g
LDLIBS_LAST    += -Wl, -Wl,-Bdynamic
RANLIB		= ranlib

COMPILE_SMALL_FLAG = -Os -fno-inline

endif

##### GNU ARM cross-compiler for ipaq linux and sharp zaurus ############################



ifeq ($(VOCAL_TOOLCHAIN_TYPE),armcross)
ifndef VOCAL_CROSS_ROOT
VOCAL_CROSS_ROOT = /skiff/local/bin
endif
CC		= $(VOCAL_CROSS_ROOT)/arm-linux-gcc
CXX		= $(VOCAL_CROSS_ROOT)/arm-linux-g++
MKSHLIB		= $(CC) $(FPIC) -shared 
DEP		= $(CXX) 
LINKER		= $(CXX) 
AR		= $(VOCAL_CROSS_ROOT)/arm-linux-ar
ARFLAGS		= rv
DFLAGS		= -MM
DMANGLE		=
INSTALL		= install
HAS_REPO        = true
LNDIR		= $(shell pwd)/$(ROOT)/tools/lndir.sh
CFLAGS		+= -Wall $(FPIC)
CXXFLAGS	+= -Wall $(FPIC)
REPO_FLAG       = -frepo $(FPIC)
DEBUG_FLAG	= -g
COMPILE_SMALL_FLAG = -Os -fno-inline -fno-keep-static-consts
LD_STATIC       = -Wl,-Bstatic
LD_DYNAMIC      = -Wl,-Bdynamic
ARCH		= arm
CONFIGURE_ARGS	= --target=arm-linux --host=i686-linux
DFLAG_INTEGRATED = -MMD
RANLIB		= $(VOCAL_CROSS_ROOT)/arm-linux-ranlib

Z = $(shell $(CC) -v 2>&1 | perl -ne 'if(/version ([0-9\.]+)/ && ($$1 eq "2.96" || int($$1) > 2) ) {print "1\n";}')
ifneq ($(Z),1)
MAKE_SEPARATE_DEPENDENCY = 1
endif
endif

##############################  SunPro toolchain ##############################


ifeq ($(VOCAL_TOOLCHAIN_TYPE),sunpro)

AR		= CC -xar -o
ARFLAGS		=
CC		= cc
CXX		= CC
DEP		= CC -xM
DMANGLE		= | perl $(TOOLS)/hacksol | grep -v /opt/SUNWspro
DFLAGS		= 
INSTALL		= install
LINKER		= CC
LNDIR		= $(shell pwd)/$(ROOT)/tools/lndir.sh
RANLIB		= ranlib

DEBUG_FLAG	= -g

MAKE_SEPARATE_DEPENDENCY = 1

LD_STATIC       = -Bstatic
LD_DYNAMIC      = -Bdynamic

endif


############################## microsoft toolchain ##############################


ifeq ($(VOCAL_TOOLCHAIN_TYPE),msgnu)

AR		= CC -xar -o
ARFLAGS		=
CC		= CL.EXE -I "C:/Program Files/Microsoft Visual Studio/VC98/Include" -I "C:/Program Files/Microsoft Visual Studio/VC98/Include" -I "../contrib/win32/mingw/include" -GX -TC -DWIN32 -DVOCAL_TOOLCHAIN_MSGNU -I "../contrib/win32/regex"
CXX		= CL.EXE -I "C:/Program Files/Microsoft Visual Studio/VC98/Include" -I "C:/Program Files/Microsoft Visual Studio/VC98/Include" -I "../contrib/win32/mingw/include" -GX -TP -DWIN32 -DVOCAL_TOOLCHAIN_MSGNU -I "../contrib/win32/regex"
DEP		= g++ -E
DMANGLE		= 
DFLAGS		= -M
INSTALL		= install
LINKER		= CC
LNDIR		= $(shell pwd)/$(ROOT)/tools/lndir.sh

DEBUG_FLAG	= -Zi

LD_STATIC       = -Bstatic
LD_DYNAMIC      = -Bdynamic
RANLIB		= ranlib

endif
